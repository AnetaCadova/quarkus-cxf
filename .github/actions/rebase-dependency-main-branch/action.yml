name: rebase-dependency-main-branch
description: 'Rebase a dependency main branch such as quarkus-main or cxf-main, rebuild it and report the status in a dedicated issue'

inputs:
  java-version:
    description: 'Java version'
    required: true
  dependency-git-repo-url:
    description: "The URL of the dependency's git repository to checkout and build from"
    required: true
  dependency-short-name:
    description: "The short lower case name of the dependency as quarkus or cxf"
    required: true
  issue-id:
    description: "The issue number where to report any rebase or build issues"
    required: true
  token:
    description: "The token to use to authenticate against GitHub API"
    required: true
  additional-maven-args:
    description: "Additional arguments to append to mvn install -ntp"
    required: true

outputs:
  dependency-commit:
    description: "The SHA1 of the dependency main branch"
    value: ${{ steps.checkout-dependency.outputs.dependency-commit }}
  dependency-version:
    description: "The version of the dependency as present in the top pom.xml of its main branch"
    value: ${{ steps.checkout-dependency.outputs.dependency-version }}
  exit-status:
    description: |
      A short string describing how the execution went. 
      It can be one of the following:
        * success
        * rebase-failed
        * build-failed
    value: ${{ env.REBASE_DEPENDENCY_MAIN_EXIT_STATUS }}

runs:
  using: 'composite'
  steps:

    - name: Set up JDK ${{ inputs.java-version }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ inputs.java-version }}

    - name: rebase ${{ inputs.dependency-short-name }}-main
      shell: bash
      run: |
        echo "REBASE_DEPENDENCY_MAIN_EXIT_STATUS=success" >> $GITHUB_ENV
        git fetch origin main
        git reset --hard origin/main
        git fetch origin ${{ inputs.dependency-short-name }}-main
        git checkout ${{ inputs.dependency-short-name }}-main 2>/dev/null || git checkout -b ${{ inputs.dependency-short-name }}-main origin/main
        git status
        echo "${{ inputs.dependency-short-name }}-main is at $(git rev-parse HEAD)"
        git rebase main
        rebaseExitCode=$?
        echo "rebaseExitCode = $rebaseExitCode"
        exit $rebaseExitCode

    - name: reopen or comment on issue https://github.com/${{ github.repository }}/issues/${{ inputs.issue-id }}
      if: ${{ failure() }}
      shell: bash
      run: |
        echo "REBASE_DEPENDENCY_MAIN_EXIT_STATUS=rebase-failed" >> $GITHUB_ENV
        oldState=$(gh issue view ${{ inputs.issue-id }} --json state -q .state -R ${{ github.repository }})
        echo "oldState = $oldState"
        msg="❌ Could not rebase ${{ inputs.dependency-short-name }}-main in ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        if [[ "$oldState" == "OPEN" ]] ; then
          gh issue comment \
            --repo ${{ github.repository }} \
            --body "$msg" \
            ${{ inputs.issue-id }}
        else
          gh issue reopen \
            --repo ${{ github.repository }} \
            --comment "$msg" \
            ${{ inputs.issue-id }}
        fi
      env:
        GH_TOKEN: ${{ inputs.token }}

    - name: Install xmllint
      shell: bash
      run: |
        sudo apt-get -qq install -y libxml2-utils

    - name: Checkout ${{ inputs.dependency-git-repo-url }}
      id: checkout-dependency
      shell: bash
      run: |
        cd ~
        [[ -d "${{ inputs.dependency-short-name }}" ]] || git clone --depth 1 --branch main ${{ inputs.dependency-git-repo-url }}
        cd "${{ inputs.dependency-short-name }}"
        echo "Current ${{ inputs.dependency-short-name }} commit: $(git rev-parse HEAD)"
        echo "dependency-commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "dependency-version=$(xmllint --xpath "/*[local-name() = 'project']/*[local-name() = 'version']/text()" pom.xml)" >> $GITHUB_OUTPUT

    - name: Set ${{ inputs.dependency-short-name }}.version to ${{ steps.checkout-dependency.outputs.dependency-version }}
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        sed -i 's|<${{ inputs.dependency-short-name }}.version>\[^<\]*</${{ inputs.dependency-short-name }}.version>|<${{ inputs.dependency-short-name }}.version>${{ steps.checkout-dependency.outputs.dependency-version }}</${{ inputs.dependency-short-name }}.version>|' pom.xml
        if git diff-index --quiet HEAD --; then
            echo "${{ inputs.dependency-short-name }}-main uses version ${{ steps.checkout-dependency.outputs.dependency-version }} already"
            ./mvnw cq:sync-versions -Dcq.simpleElementWhitespace=AUTODETECT_PREFER_SPACE -N -ntp
            git add -A
            git commit -m "Re-run mvn cq:sync-versions"
        else
            ./mvnw cq:sync-versions -Dcq.simpleElementWhitespace=AUTODETECT_PREFER_SPACE -N -ntp
            if git diff-index --quiet HEAD --; then
              git add -A
              git commit -m "Upgrade ${{ inputs.dependency-short-name }}.version to ${{ steps.checkout-dependency.outputs.dependency-version }}"
            fi 
        fi
